{
  "resolvedId": "D:/localserver/web-nuxt-sdk/web-nuxt-qr-netlify/node_modules/swiper/modules/effect-flip/effect-flip.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import $ from '../../shared/dom.js';\nimport createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectFlip({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n\n  const createSlideShadows = ($slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n    if (shadowBefore.length === 0) {\n      shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n\n    if (shadowAfter.length === 0) {\n      shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n\n    if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n\n  const recreateShadows = () => {\n    // Set shadows\n    const params = swiper.params.flipEffect;\n    swiper.slides.each(slideEl => {\n      const $slideEl = $(slideEl);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n\n      createSlideShadows($slideEl, progress, params);\n    });\n  };\n\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n\n      const offset = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, params);\n      }\n\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}",
      "start": 1711511840704,
      "end": 1711511843545,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711511843545,
      "end": 1711511843545,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711511843545,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711511843546,
      "end": 1711511843546,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711511843546,
      "end": 1711511843547,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711511843547,
      "end": 1711511843547,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711511843547,
      "end": 1711511843547,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711511843547,
      "end": 1711511843547,
      "order": "normal"
    }
  ]
}
