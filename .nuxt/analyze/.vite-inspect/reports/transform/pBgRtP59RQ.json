{
  "resolvedId": "D:/localserver/web-nuxt-sdk/web-nuxt-qr-netlify/node_modules/swiper/core/events/onTouchEnd.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}",
      "start": 1711515392840,
      "end": 1711515392971,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711515392971,
      "end": 1711515392971,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711515392971,
      "end": 1711515392972,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711515392972,
      "end": 1711515392972,
      "order": "normal"
    }
  ]
}
