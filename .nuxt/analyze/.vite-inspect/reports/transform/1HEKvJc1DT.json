{
  "resolvedId": "D:/localserver/web-nuxt-sdk/web-nuxt-qr-netlify/node_modules/swiper/modules/effect-coverflow/effect-coverflow.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nexport default function EffectCoverflow({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth; // Each slide offset from center\n\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders\n\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values\n\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? 'left' : 'top');\n        }\n\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n\n        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n  };\n\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}",
      "start": 1711509462484,
      "end": 1711509465259,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711509465259,
      "end": 1711509465259,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711509465259,
      "end": 1711509465260,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711509465260,
      "end": 1711509465260,
      "order": "normal"
    }
  ]
}
