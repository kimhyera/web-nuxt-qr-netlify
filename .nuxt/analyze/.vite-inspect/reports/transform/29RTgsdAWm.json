{
  "resolvedId": "D:/localserver/web-nuxt-sdk/web-nuxt-qr-netlify/node_modules/swiper/modules/grid/grid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        '-webkit-order': newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`\n    });\n\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}",
      "start": 1711512699039,
      "end": 1711512700780,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1711512700780,
      "end": 1711512700780,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1711512700780,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1711512700781,
      "end": 1711512700781,
      "order": "normal"
    }
  ]
}
