// Dependency : _variables.scss
// SUMMARY:
// Bootstrap
// breakpoints
// spacing loop
// Size 
// Grid system
// class 자동생성
// END

// Bootstrap functions

// guid
$enable-grid-classes: true;
$grid-columns: 12 !default;
$grid-gutter-width: 20px !default;
$grid-row-columns: 6 !default;



// Grid breakpoints
$grid-breakpoints: (
    xxxs: 0,
    xxs: 320px,
    xs: 375px,
    sm: 576px,
    md: 768px,
    lg: 1024px,
    xl: 1200px,
    xxl: 1400px,
    xxxl: 1600px,
);


@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	$max: breakpoint-max($name, $breakpoints);

	@if $min !=null and $max !=null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	}

	@else if $max==null {
		@include mdq-max($name, $breakpoints) {
			@content;
		}
	}

	@else if $min==null {
		@include mdq-min($name, $breakpoints) {
			@content;
		}
	}
}


//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;
  
	@each $key,
	$num in $map {
	  @if $prev-num==null or unit($num)=="%"or unit($prev-num)=="%" {
		// Do nothing
	  }
  
	  @else if not comparable($prev-num, $num) {
		@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
	  }
  
	  @else if $prev-num>=$num {
		@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
	  }
  
	  $prev-key: $key;
	  $prev-num: $num;
	}
  }
  
  // Starts at zero
  // Used to ensure the min-width of the lowest breakpoint starts at 0.
  @mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
	@if length($map)>0 {
	  $values: map-values($map);
	  $first-value: nth($values, 1);
  
	  @if $first-value !=0 {
		@warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
	  }
	}
  }
  
  
  
  


// breakpoints
//  미디어 쿼리
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n !=null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min !=0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}


@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints)==null, '', '-#{$name}');
}



// spacing loop
// Spacer Unit : 4 == 4px ( 여백 단위 변수 )
// Spacer Max : 20 == 80px ( 여백 최대값 )
$spacer: 4;
$spacerUnit: 2;
$spacerMax: 10;
$spacers: ();

@for $i from 0 through $spacerMax {
    $spacers: map-merge((#{$i}: $spacer * calc($i/$spacerUnit)), $spacers);
}


//
// Size Max : 100 == 100% ( 너비 최대값 )
$sizeMax: 100;
// This variable affects the `.h-*` and `.w-*` classes.
$sizes: ();

// stylelint-disable-next-line scss/dollar-variable-default
@for $i from 0 through $sizeMax {
    $sizes: map-merge((#{$i}: $i * 1%), $sizes);
}

// Font Size breakpoints
$font-size-breakpoints: (
    xxxs: 14px,
    xs: 14px,
    sm: 14px,
    md: 14px,
    lg: 14px,
    xl: 14px,
);

// Grid breakpoints
$grid-breakpoints: (
    xxxs: 0,
    xxs: 320px,
    xs: 375px,
    sm: 576px,
    md: 768px,
    lg: 1024px,
    xl: 1200px,
    xxl: 1400px,
    xxxl: 1600px,
);

@include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
@include _assert-starts-at-zero($grid-breakpoints, '$grid-breakpoints');

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
    xs: 576px,
    sm: 768px,
    md: 1024px,
    lg: 1200px,
);

@include _assert-ascending($container-max-widths, '$container-max-widths');

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
    xs: 576px,
    sm: 768px,
    md: 1024px,
    lg: 1200px,
);

@include _assert-ascending($container-max-widths, '$container-max-widths');



// guid


// Grid system
// 
// Generate semantic grid columns with these mixins.

@mixin make-container() {
	width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include mdq-max($breakpoint, $grid-breakpoints) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row() {
	display: -webkit-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
	-ms-flex-wrap: wrap;
	-webkit-flex-wrap: wrap;
	flex-wrap: wrap;
	margin-right: calc($grid-gutter-width / -2);
	margin-left: calc($grid-gutter-width / -2);
}

@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: calc($grid-gutter-width / 2);
	padding-left: calc($grid-gutter-width / 2);
}

@mixin make-col($size, $columns: $grid-columns) {
	-webkit-box-flex: 0;
	-ms-flex: 0 0 calc($size / $columns * 100%);
	-webkit-flex: 0 0 calc($size / $columns * 100%);
	flex: 0 0 calc(($size / $columns ) * 100%);
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: calc(($size / $columns) * 100%);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: calc($size / $columns);
	margin-left: if($num == 0, 0, percentage($num));
}
// 프레임워크 그리드 생성
//주어진 그리드 클래스의 정확한 개수를 생성한다. $grid-columns'의 모든 값.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px; // Prevent columns from collapsing when empty
		padding-right: calc($gutter / 2);
		padding-left: calc($gutter / 2);
	}

	@each $breakpoint in map-keys($grid-breakpoints) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		// Allow columns to stretch full width below their breakpoints
		@for $i from 1 through $columns {
			.col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}
		.col#{$infix},
		.col#{$infix}-auto {
			@extend %grid-column;
		}

		@include mdq-max($breakpoint, $grid-breakpoints) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col#{$infix} {
				-ms-flex-preferred-size: 0;
				flex-basis: 0;
				-webkit-box-flex: 1;
				-ms-flex-positive: 1;
				flex-grow: 1;
				max-width: 100%;
				min-width: 0;
			}
			.col#{$infix}-auto {
				-webkit-box-flex: 0;
				-ms-flex: 0 0 auto;
				flex: 0 0 auto;
				width: auto;
				max-width: none; // Reset earlier grid tiers
			}

			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}

			.order#{$infix}-first {
				-webkit-box-ordinal-group: 0;
				-ms-flex-order: -1;
				order: -1;
			}

			@for $i from 1 through $columns {
				.order#{$infix}-#{$i} {
					-webkit-box-ordinal-group: $i;
					-ms-flex-order: $i;
					order: $i;
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not($infix == '' and $i == 0) {
					// Avoid emitting useless .offset-0
					.offset#{$infix}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}



@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);

	@if $min !=null and $max !=null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	}

	@else if $max==null {
		@include mdq-max($lower, $breakpoints) {
			@content;
		}
	}

	@else if $min==null {
		@include mdq-min($upper, $breakpoints) {
			@content;
		}
	}
}

@mixin mdq-max($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);

	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}

	@else {
		@content;
	}
}

@mixin mdq-min($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);

	@if $max {
		@media (max-width: $max) {
			@content;
		}
	}

	@else {
		@content;
	}
}







// 마진 
@each $breakpoint in map-keys($grid-breakpoints) {
    @include mdq-max($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $prop,
        $abbrev in (margin: m, padding: p) {

            @each $size,
            $length in $spacers {
                .#{$abbrev}#{$infix}-#{$size} {
                    #{$prop}: $length !important;
                }

                .#{$abbrev}t#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-top: $length !important;
                }

                .#{$abbrev}r#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-right: $length !important;
                }

                .#{$abbrev}b#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-bottom: $length !important;
                }

                .#{$abbrev}l#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-left: $length !important;
                }
            }
        }

        // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
        @each $size,
        $length in $spacers {
            @if $size !=0 {
                .m#{$infix}-n#{$size} {
                    margin: -$length !important;
                }

                .mt#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-top: -$length !important;
                }

                .mr#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-right: -$length !important;
                }

                .mb#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-bottom: -$length !important;
                }

                .ml#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-left: -$length !important;
                }
            }
        }

        // Some special margin utils
        .m#{$infix}-auto {
            margin: auto !important;
        }

        .mt#{$infix}-auto,
        .my#{$infix}-auto {
            margin-top: auto !important;
        }

        .mr#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-right: auto !important;
        }

        .mb#{$infix}-auto,
        .my#{$infix}-auto {
            margin-bottom: auto !important;
        }

        .ml#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-left: auto !important;
        }
    }
}



// grid
// grid-row
$enable-grid-classes: true;


$grid-columns: 12 !default;
$grid-gutter-width: 20px !default;
$grid-row-columns: 6 !default;

@if $enable-grid-classes {
    .row {
        @include make-row();
    }


    .no-gutters {
        margin-right: 0;
        margin-left: 0;

        >.col,
        >[class*='col-'] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

// grid-columns

@if $enable-grid-classes {
    @include make-grid-columns();
}



// class 자동생성
$displays: none, inline, inline-block, block, table, table-caption, table-column, table-column-group, table-header-group, table-footer-group,
    table-row-group, table-row, table-cell, flex, inline-flex;

@each $value in $displays {
    .d-#{$value} {
        display: $value !important;
    }
}

$overflows: auto, hidden;
@each $value in $overflows {
    .overflow-#{$value} {
        overflow: $value !important;
    }
}


$positions: static, relative, absolute, fixed, sticky;

@each $position in $positions {
    .position-#{$position} {
        position: $position !important;
    }
}
